/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace OnRamp {
  export type StaticConfigStruct = {
    chainSelector: BigNumberish;
    rmnRemote: AddressLike;
    nonceManager: AddressLike;
    tokenAdminRegistry: AddressLike;
  };

  export type StaticConfigStructOutput = [
    chainSelector: bigint,
    rmnRemote: string,
    nonceManager: string,
    tokenAdminRegistry: string
  ] & {
    chainSelector: bigint;
    rmnRemote: string;
    nonceManager: string;
    tokenAdminRegistry: string;
  };

  export type DynamicConfigStruct = {
    feeQuoter: AddressLike;
    reentrancyGuardEntered: boolean;
    messageInterceptor: AddressLike;
    feeAggregator: AddressLike;
    allowlistAdmin: AddressLike;
  };

  export type DynamicConfigStructOutput = [
    feeQuoter: string,
    reentrancyGuardEntered: boolean,
    messageInterceptor: string,
    feeAggregator: string,
    allowlistAdmin: string
  ] & {
    feeQuoter: string;
    reentrancyGuardEntered: boolean;
    messageInterceptor: string;
    feeAggregator: string;
    allowlistAdmin: string;
  };

  export type DestChainConfigArgsStruct = {
    destChainSelector: BigNumberish;
    router: AddressLike;
    allowlistEnabled: boolean;
  };

  export type DestChainConfigArgsStructOutput = [
    destChainSelector: bigint,
    router: string,
    allowlistEnabled: boolean
  ] & { destChainSelector: bigint; router: string; allowlistEnabled: boolean };

  export type AllowlistConfigArgsStruct = {
    destChainSelector: BigNumberish;
    allowlistEnabled: boolean;
    addedAllowlistedSenders: AddressLike[];
    removedAllowlistedSenders: AddressLike[];
  };

  export type AllowlistConfigArgsStructOutput = [
    destChainSelector: bigint,
    allowlistEnabled: boolean,
    addedAllowlistedSenders: string[],
    removedAllowlistedSenders: string[]
  ] & {
    destChainSelector: bigint;
    allowlistEnabled: boolean;
    addedAllowlistedSenders: string[];
    removedAllowlistedSenders: string[];
  };
}

export declare namespace Internal {
  export type RampMessageHeaderStruct = {
    messageId: BytesLike;
    sourceChainSelector: BigNumberish;
    destChainSelector: BigNumberish;
    sequenceNumber: BigNumberish;
    nonce: BigNumberish;
  };

  export type RampMessageHeaderStructOutput = [
    messageId: string,
    sourceChainSelector: bigint,
    destChainSelector: bigint,
    sequenceNumber: bigint,
    nonce: bigint
  ] & {
    messageId: string;
    sourceChainSelector: bigint;
    destChainSelector: bigint;
    sequenceNumber: bigint;
    nonce: bigint;
  };

  export type EVM2AnyTokenTransferStruct = {
    sourcePoolAddress: AddressLike;
    destTokenAddress: BytesLike;
    extraData: BytesLike;
    amount: BigNumberish;
    destExecData: BytesLike;
  };

  export type EVM2AnyTokenTransferStructOutput = [
    sourcePoolAddress: string,
    destTokenAddress: string,
    extraData: string,
    amount: bigint,
    destExecData: string
  ] & {
    sourcePoolAddress: string;
    destTokenAddress: string;
    extraData: string;
    amount: bigint;
    destExecData: string;
  };

  export type EVM2AnyRampMessageStruct = {
    header: Internal.RampMessageHeaderStruct;
    sender: AddressLike;
    data: BytesLike;
    receiver: BytesLike;
    extraArgs: BytesLike;
    feeToken: AddressLike;
    feeTokenAmount: BigNumberish;
    feeValueJuels: BigNumberish;
    tokenAmounts: Internal.EVM2AnyTokenTransferStruct[];
  };

  export type EVM2AnyRampMessageStructOutput = [
    header: Internal.RampMessageHeaderStructOutput,
    sender: string,
    data: string,
    receiver: string,
    extraArgs: string,
    feeToken: string,
    feeTokenAmount: bigint,
    feeValueJuels: bigint,
    tokenAmounts: Internal.EVM2AnyTokenTransferStructOutput[]
  ] & {
    header: Internal.RampMessageHeaderStructOutput;
    sender: string;
    data: string;
    receiver: string;
    extraArgs: string;
    feeToken: string;
    feeTokenAmount: bigint;
    feeValueJuels: bigint;
    tokenAmounts: Internal.EVM2AnyTokenTransferStructOutput[];
  };
}

export declare namespace Client {
  export type EVMTokenAmountStruct = {
    token: AddressLike;
    amount: BigNumberish;
  };

  export type EVMTokenAmountStructOutput = [token: string, amount: bigint] & {
    token: string;
    amount: bigint;
  };

  export type EVM2AnyMessageStruct = {
    receiver: BytesLike;
    data: BytesLike;
    tokenAmounts: Client.EVMTokenAmountStruct[];
    feeToken: AddressLike;
    extraArgs: BytesLike;
  };

  export type EVM2AnyMessageStructOutput = [
    receiver: string,
    data: string,
    tokenAmounts: Client.EVMTokenAmountStructOutput[],
    feeToken: string,
    extraArgs: string
  ] & {
    receiver: string;
    data: string;
    tokenAmounts: Client.EVMTokenAmountStructOutput[];
    feeToken: string;
    extraArgs: string;
  };
}

export interface OnRampInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "applyAllowlistUpdates"
      | "applyDestChainConfigUpdates"
      | "forwardFromRouter"
      | "getAllowedSendersList"
      | "getDestChainConfig"
      | "getDynamicConfig"
      | "getExpectedNextSequenceNumber"
      | "getFee"
      | "getPoolBySourceToken"
      | "getStaticConfig"
      | "getSupportedTokens"
      | "owner"
      | "setDynamicConfig"
      | "transferOwnership"
      | "typeAndVersion"
      | "withdrawFeeTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllowListAdminSet"
      | "AllowListSendersAdded"
      | "AllowListSendersRemoved"
      | "CCIPMessageSent"
      | "ConfigSet"
      | "DestChainConfigSet"
      | "FeeTokenWithdrawn"
      | "OwnershipTransferRequested"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyAllowlistUpdates",
    values: [OnRamp.AllowlistConfigArgsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "applyDestChainConfigUpdates",
    values: [OnRamp.DestChainConfigArgsStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardFromRouter",
    values: [
      BigNumberish,
      Client.EVM2AnyMessageStruct,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllowedSendersList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDestChainConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedNextSequenceNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, Client.EVM2AnyMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolBySourceToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStaticConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDynamicConfig",
    values: [OnRamp.DynamicConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "typeAndVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeTokens",
    values: [AddressLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyAllowlistUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyDestChainConfigUpdates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardFromRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllowedSendersList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestChainConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedNextSequenceNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolBySourceToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStaticConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDynamicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "typeAndVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeTokens",
    data: BytesLike
  ): Result;
}

export namespace AllowListAdminSetEvent {
  export type InputTuple = [allowlistAdmin: AddressLike];
  export type OutputTuple = [allowlistAdmin: string];
  export interface OutputObject {
    allowlistAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowListSendersAddedEvent {
  export type InputTuple = [
    destChainSelector: BigNumberish,
    senders: AddressLike[]
  ];
  export type OutputTuple = [destChainSelector: bigint, senders: string[]];
  export interface OutputObject {
    destChainSelector: bigint;
    senders: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllowListSendersRemovedEvent {
  export type InputTuple = [
    destChainSelector: BigNumberish,
    senders: AddressLike[]
  ];
  export type OutputTuple = [destChainSelector: bigint, senders: string[]];
  export interface OutputObject {
    destChainSelector: bigint;
    senders: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CCIPMessageSentEvent {
  export type InputTuple = [
    destChainSelector: BigNumberish,
    sequenceNumber: BigNumberish,
    message: Internal.EVM2AnyRampMessageStruct
  ];
  export type OutputTuple = [
    destChainSelector: bigint,
    sequenceNumber: bigint,
    message: Internal.EVM2AnyRampMessageStructOutput
  ];
  export interface OutputObject {
    destChainSelector: bigint;
    sequenceNumber: bigint;
    message: Internal.EVM2AnyRampMessageStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [
    staticConfig: OnRamp.StaticConfigStruct,
    dynamicConfig: OnRamp.DynamicConfigStruct
  ];
  export type OutputTuple = [
    staticConfig: OnRamp.StaticConfigStructOutput,
    dynamicConfig: OnRamp.DynamicConfigStructOutput
  ];
  export interface OutputObject {
    staticConfig: OnRamp.StaticConfigStructOutput;
    dynamicConfig: OnRamp.DynamicConfigStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DestChainConfigSetEvent {
  export type InputTuple = [
    destChainSelector: BigNumberish,
    sequenceNumber: BigNumberish,
    router: AddressLike,
    allowlistEnabled: boolean
  ];
  export type OutputTuple = [
    destChainSelector: bigint,
    sequenceNumber: bigint,
    router: string,
    allowlistEnabled: boolean
  ];
  export interface OutputObject {
    destChainSelector: bigint;
    sequenceNumber: bigint;
    router: string;
    allowlistEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeTokenWithdrawnEvent {
  export type InputTuple = [
    feeAggregator: AddressLike,
    feeToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    feeAggregator: string,
    feeToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    feeAggregator: string;
    feeToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferRequestedEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [from: AddressLike, to: AddressLike];
  export type OutputTuple = [from: string, to: string];
  export interface OutputObject {
    from: string;
    to: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OnRamp extends BaseContract {
  connect(runner?: ContractRunner | null): OnRamp;
  waitForDeployment(): Promise<this>;

  interface: OnRampInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  applyAllowlistUpdates: TypedContractMethod<
    [allowlistConfigArgsItems: OnRamp.AllowlistConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;

  applyDestChainConfigUpdates: TypedContractMethod<
    [destChainConfigArgs: OnRamp.DestChainConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;

  forwardFromRouter: TypedContractMethod<
    [
      destChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct,
      feeTokenAmount: BigNumberish,
      originalSender: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  getAllowedSendersList: TypedContractMethod<
    [destChainSelector: BigNumberish],
    [
      [boolean, string[]] & {
        isEnabled: boolean;
        configuredAddresses: string[];
      }
    ],
    "view"
  >;

  getDestChainConfig: TypedContractMethod<
    [destChainSelector: BigNumberish],
    [
      [bigint, boolean, string] & {
        sequenceNumber: bigint;
        allowlistEnabled: boolean;
        router: string;
      }
    ],
    "view"
  >;

  getDynamicConfig: TypedContractMethod<
    [],
    [OnRamp.DynamicConfigStructOutput],
    "view"
  >;

  getExpectedNextSequenceNumber: TypedContractMethod<
    [destChainSelector: BigNumberish],
    [bigint],
    "view"
  >;

  getFee: TypedContractMethod<
    [destChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct],
    [bigint],
    "view"
  >;

  getPoolBySourceToken: TypedContractMethod<
    [arg0: BigNumberish, sourceToken: AddressLike],
    [string],
    "view"
  >;

  getStaticConfig: TypedContractMethod<
    [],
    [OnRamp.StaticConfigStructOutput],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<
    [arg0: BigNumberish],
    [string[]],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  setDynamicConfig: TypedContractMethod<
    [dynamicConfig: OnRamp.DynamicConfigStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [to: AddressLike],
    [void],
    "nonpayable"
  >;

  typeAndVersion: TypedContractMethod<[], [string], "view">;

  withdrawFeeTokens: TypedContractMethod<
    [feeTokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "applyAllowlistUpdates"
  ): TypedContractMethod<
    [allowlistConfigArgsItems: OnRamp.AllowlistConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "applyDestChainConfigUpdates"
  ): TypedContractMethod<
    [destChainConfigArgs: OnRamp.DestChainConfigArgsStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forwardFromRouter"
  ): TypedContractMethod<
    [
      destChainSelector: BigNumberish,
      message: Client.EVM2AnyMessageStruct,
      feeTokenAmount: BigNumberish,
      originalSender: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllowedSendersList"
  ): TypedContractMethod<
    [destChainSelector: BigNumberish],
    [
      [boolean, string[]] & {
        isEnabled: boolean;
        configuredAddresses: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDestChainConfig"
  ): TypedContractMethod<
    [destChainSelector: BigNumberish],
    [
      [bigint, boolean, string] & {
        sequenceNumber: bigint;
        allowlistEnabled: boolean;
        router: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDynamicConfig"
  ): TypedContractMethod<[], [OnRamp.DynamicConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getExpectedNextSequenceNumber"
  ): TypedContractMethod<[destChainSelector: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [destChainSelector: BigNumberish, message: Client.EVM2AnyMessageStruct],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolBySourceToken"
  ): TypedContractMethod<
    [arg0: BigNumberish, sourceToken: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStaticConfig"
  ): TypedContractMethod<[], [OnRamp.StaticConfigStructOutput], "view">;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setDynamicConfig"
  ): TypedContractMethod<
    [dynamicConfig: OnRamp.DynamicConfigStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "typeAndVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFeeTokens"
  ): TypedContractMethod<[feeTokens: AddressLike[]], [void], "nonpayable">;

  getEvent(
    key: "AllowListAdminSet"
  ): TypedContractEvent<
    AllowListAdminSetEvent.InputTuple,
    AllowListAdminSetEvent.OutputTuple,
    AllowListAdminSetEvent.OutputObject
  >;
  getEvent(
    key: "AllowListSendersAdded"
  ): TypedContractEvent<
    AllowListSendersAddedEvent.InputTuple,
    AllowListSendersAddedEvent.OutputTuple,
    AllowListSendersAddedEvent.OutputObject
  >;
  getEvent(
    key: "AllowListSendersRemoved"
  ): TypedContractEvent<
    AllowListSendersRemovedEvent.InputTuple,
    AllowListSendersRemovedEvent.OutputTuple,
    AllowListSendersRemovedEvent.OutputObject
  >;
  getEvent(
    key: "CCIPMessageSent"
  ): TypedContractEvent<
    CCIPMessageSentEvent.InputTuple,
    CCIPMessageSentEvent.OutputTuple,
    CCIPMessageSentEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "DestChainConfigSet"
  ): TypedContractEvent<
    DestChainConfigSetEvent.InputTuple,
    DestChainConfigSetEvent.OutputTuple,
    DestChainConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeTokenWithdrawn"
  ): TypedContractEvent<
    FeeTokenWithdrawnEvent.InputTuple,
    FeeTokenWithdrawnEvent.OutputTuple,
    FeeTokenWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferRequested"
  ): TypedContractEvent<
    OwnershipTransferRequestedEvent.InputTuple,
    OwnershipTransferRequestedEvent.OutputTuple,
    OwnershipTransferRequestedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AllowListAdminSet(address)": TypedContractEvent<
      AllowListAdminSetEvent.InputTuple,
      AllowListAdminSetEvent.OutputTuple,
      AllowListAdminSetEvent.OutputObject
    >;
    AllowListAdminSet: TypedContractEvent<
      AllowListAdminSetEvent.InputTuple,
      AllowListAdminSetEvent.OutputTuple,
      AllowListAdminSetEvent.OutputObject
    >;

    "AllowListSendersAdded(uint64,address[])": TypedContractEvent<
      AllowListSendersAddedEvent.InputTuple,
      AllowListSendersAddedEvent.OutputTuple,
      AllowListSendersAddedEvent.OutputObject
    >;
    AllowListSendersAdded: TypedContractEvent<
      AllowListSendersAddedEvent.InputTuple,
      AllowListSendersAddedEvent.OutputTuple,
      AllowListSendersAddedEvent.OutputObject
    >;

    "AllowListSendersRemoved(uint64,address[])": TypedContractEvent<
      AllowListSendersRemovedEvent.InputTuple,
      AllowListSendersRemovedEvent.OutputTuple,
      AllowListSendersRemovedEvent.OutputObject
    >;
    AllowListSendersRemoved: TypedContractEvent<
      AllowListSendersRemovedEvent.InputTuple,
      AllowListSendersRemovedEvent.OutputTuple,
      AllowListSendersRemovedEvent.OutputObject
    >;

    "CCIPMessageSent(uint64,uint64,tuple)": TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;
    CCIPMessageSent: TypedContractEvent<
      CCIPMessageSentEvent.InputTuple,
      CCIPMessageSentEvent.OutputTuple,
      CCIPMessageSentEvent.OutputObject
    >;

    "ConfigSet(tuple,tuple)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "DestChainConfigSet(uint64,uint64,address,bool)": TypedContractEvent<
      DestChainConfigSetEvent.InputTuple,
      DestChainConfigSetEvent.OutputTuple,
      DestChainConfigSetEvent.OutputObject
    >;
    DestChainConfigSet: TypedContractEvent<
      DestChainConfigSetEvent.InputTuple,
      DestChainConfigSetEvent.OutputTuple,
      DestChainConfigSetEvent.OutputObject
    >;

    "FeeTokenWithdrawn(address,address,uint256)": TypedContractEvent<
      FeeTokenWithdrawnEvent.InputTuple,
      FeeTokenWithdrawnEvent.OutputTuple,
      FeeTokenWithdrawnEvent.OutputObject
    >;
    FeeTokenWithdrawn: TypedContractEvent<
      FeeTokenWithdrawnEvent.InputTuple,
      FeeTokenWithdrawnEvent.OutputTuple,
      FeeTokenWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferRequested(address,address)": TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;
    OwnershipTransferRequested: TypedContractEvent<
      OwnershipTransferRequestedEvent.InputTuple,
      OwnershipTransferRequestedEvent.OutputTuple,
      OwnershipTransferRequestedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
