/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { OnRamp, OnRampInterface } from "../OnRamp";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "chainSelector",
            type: "uint64",
          },
          {
            internalType: "contract IRMNRemote",
            name: "rmnRemote",
            type: "address",
          },
          {
            internalType: "address",
            name: "nonceManager",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAdminRegistry",
            type: "address",
          },
        ],
        internalType: "struct OnRamp.StaticConfig",
        name: "staticConfig",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "feeQuoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "reentrancyGuardEntered",
            type: "bool",
          },
          {
            internalType: "address",
            name: "messageInterceptor",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeAggregator",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowlistAdmin",
            type: "address",
          },
        ],
        internalType: "struct OnRamp.DynamicConfig",
        name: "dynamicConfig",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint64",
            name: "destChainSelector",
            type: "uint64",
          },
          {
            internalType: "contract IRouter",
            name: "router",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowlistEnabled",
            type: "bool",
          },
        ],
        internalType: "struct OnRamp.DestChainConfigArgs[]",
        name: "destChainConfigArgs",
        type: "tuple[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "CannotSendZeroTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "CannotTransferToSelf",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "CursedByRMN",
    type: "error",
  },
  {
    inputs: [],
    name: "GetSupportedTokensFunctionalityRemovedCheckAdminRegistry",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "InvalidAllowListRequest",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidConfig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "InvalidDestChainConfig",
    type: "error",
  },
  {
    inputs: [],
    name: "MustBeCalledByRouter",
    type: "error",
  },
  {
    inputs: [],
    name: "MustBeProposedOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCallableByOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "OnlyCallableByOwnerOrAllowlistAdmin",
    type: "error",
  },
  {
    inputs: [],
    name: "OwnerCannotBeZero",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    inputs: [],
    name: "RouterMustSetOriginalSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "SenderNotAllowed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "UnsupportedToken",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "allowlistAdmin",
        type: "address",
      },
    ],
    name: "AllowListAdminSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
    ],
    name: "AllowListSendersAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "senders",
        type: "address[]",
      },
    ],
    name: "AllowListSendersRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "bytes32",
                name: "messageId",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "sourceChainSelector",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "destChainSelector",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "sequenceNumber",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "nonce",
                type: "uint64",
              },
            ],
            internalType: "struct Internal.RampMessageHeader",
            name: "header",
            type: "tuple",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feeTokenAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "feeValueJuels",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "address",
                name: "sourcePoolAddress",
                type: "address",
              },
              {
                internalType: "bytes",
                name: "destTokenAddress",
                type: "bytes",
              },
              {
                internalType: "bytes",
                name: "extraData",
                type: "bytes",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "bytes",
                name: "destExecData",
                type: "bytes",
              },
            ],
            internalType: "struct Internal.EVM2AnyTokenTransfer[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct Internal.EVM2AnyRampMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "CCIPMessageSent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "chainSelector",
            type: "uint64",
          },
          {
            internalType: "contract IRMNRemote",
            name: "rmnRemote",
            type: "address",
          },
          {
            internalType: "address",
            name: "nonceManager",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAdminRegistry",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct OnRamp.StaticConfig",
        name: "staticConfig",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "feeQuoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "reentrancyGuardEntered",
            type: "bool",
          },
          {
            internalType: "address",
            name: "messageInterceptor",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeAggregator",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowlistAdmin",
            type: "address",
          },
        ],
        indexed: false,
        internalType: "struct OnRamp.DynamicConfig",
        name: "dynamicConfig",
        type: "tuple",
      },
    ],
    name: "ConfigSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "contract IRouter",
        name: "router",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "allowlistEnabled",
        type: "bool",
      },
    ],
    name: "DestChainConfigSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "feeAggregator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "feeToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "FeeTokenWithdrawn",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferRequested",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "destChainSelector",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "allowlistEnabled",
            type: "bool",
          },
          {
            internalType: "address[]",
            name: "addedAllowlistedSenders",
            type: "address[]",
          },
          {
            internalType: "address[]",
            name: "removedAllowlistedSenders",
            type: "address[]",
          },
        ],
        internalType: "struct OnRamp.AllowlistConfigArgs[]",
        name: "allowlistConfigArgsItems",
        type: "tuple[]",
      },
    ],
    name: "applyAllowlistUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "destChainSelector",
            type: "uint64",
          },
          {
            internalType: "contract IRouter",
            name: "router",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowlistEnabled",
            type: "bool",
          },
        ],
        internalType: "struct OnRamp.DestChainConfigArgs[]",
        name: "destChainConfigArgs",
        type: "tuple[]",
      },
    ],
    name: "applyDestChainConfigUpdates",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "feeTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "originalSender",
        type: "address",
      },
    ],
    name: "forwardFromRouter",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "getAllowedSendersList",
    outputs: [
      {
        internalType: "bool",
        name: "isEnabled",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "configuredAddresses",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "getDestChainConfig",
    outputs: [
      {
        internalType: "uint64",
        name: "sequenceNumber",
        type: "uint64",
      },
      {
        internalType: "bool",
        name: "allowlistEnabled",
        type: "bool",
      },
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDynamicConfig",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "feeQuoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "reentrancyGuardEntered",
            type: "bool",
          },
          {
            internalType: "address",
            name: "messageInterceptor",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeAggregator",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowlistAdmin",
            type: "address",
          },
        ],
        internalType: "struct OnRamp.DynamicConfig",
        name: "dynamicConfig",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
    ],
    name: "getExpectedNextSequenceNumber",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "destChainSelector",
        type: "uint64",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "receiver",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "tokenAmounts",
            type: "tuple[]",
          },
          {
            internalType: "address",
            name: "feeToken",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "extraArgs",
            type: "bytes",
          },
        ],
        internalType: "struct Client.EVM2AnyMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "getFee",
    outputs: [
      {
        internalType: "uint256",
        name: "feeTokenAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
      {
        internalType: "contract IERC20",
        name: "sourceToken",
        type: "address",
      },
    ],
    name: "getPoolBySourceToken",
    outputs: [
      {
        internalType: "contract IPoolV1",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getStaticConfig",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "chainSelector",
            type: "uint64",
          },
          {
            internalType: "contract IRMNRemote",
            name: "rmnRemote",
            type: "address",
          },
          {
            internalType: "address",
            name: "nonceManager",
            type: "address",
          },
          {
            internalType: "address",
            name: "tokenAdminRegistry",
            type: "address",
          },
        ],
        internalType: "struct OnRamp.StaticConfig",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    name: "getSupportedTokens",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "feeQuoter",
            type: "address",
          },
          {
            internalType: "bool",
            name: "reentrancyGuardEntered",
            type: "bool",
          },
          {
            internalType: "address",
            name: "messageInterceptor",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeAggregator",
            type: "address",
          },
          {
            internalType: "address",
            name: "allowlistAdmin",
            type: "address",
          },
        ],
        internalType: "struct OnRamp.DynamicConfig",
        name: "dynamicConfig",
        type: "tuple",
      },
    ],
    name: "setDynamicConfig",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "typeAndVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "feeTokens",
        type: "address[]",
      },
    ],
    name: "withdrawFeeTokens",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class OnRamp__factory {
  static readonly abi = _abi;
  static createInterface(): OnRampInterface {
    return new Interface(_abi) as OnRampInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OnRamp {
    return new Contract(address, _abi, runner) as unknown as OnRamp;
  }
}
